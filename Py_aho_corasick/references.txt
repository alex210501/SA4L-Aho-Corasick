trie : https://www.geeksforgeeks.org/introduction-to-trie-data-structure-and-algorithm-tutorials/
building trie : https://www.geeksforgeeks.org/trie-insert-and-search/
If a node has no child nodes, it's known as a leaf node.

 def failure_links(self):
     # Function that will go through the trie 
     # and that will build the failure links and 
     # the dictionnary links

     pCrawl = self.root
     pCrawl.failure_link = self.root
     pCrawl.dictionnary_link = self.root
     length = len(pCrawl.children)

     for index in range(length):
         if pCrawl.children[index] is not None and pCrawl is self.root:
             pCrawl.failure_link = self.root

         elif pCrawl.children[index] is not None:
             pCrawl.failure_link = 
             
     return 

 def _find_failure_links(self, sequence):
     
     return


graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling